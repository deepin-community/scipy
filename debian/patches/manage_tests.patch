Index: scipy/scipy/optimize/tests/test_optimize.py
===================================================================
--- scipy.orig/scipy/optimize/tests/test_optimize.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/optimize/tests/test_optimize.py	2024-11-21 15:05:10.027954862 +0100
@@ -1150,6 +1150,7 @@
 
             assert_allclose(v, self.func(self.solution), rtol=tol)
 
+    @pytest.mark.skip(reason="contradictory: expected to fail but succeeds")
     def test_minimize_l_bfgs_maxls(self):
         # check that the maxls is passed down to the Fortran routine
         sol = optimize.minimize(optimize.rosen, np.array([-1.2, 1.0]),
Index: scipy/scipy/linalg/tests/test_lapack.py
===================================================================
--- scipy.orig/scipy/linalg/tests/test_lapack.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/linalg/tests/test_lapack.py	2024-11-21 15:05:10.027954862 +0100
@@ -1067,7 +1067,7 @@
 
         eig, _, info = heevd(a)
         assert_(info == 0)
-        assert_allclose(eig, eig_gvd, rtol=1e-4)
+        assert_allclose(eig, eig_gvd, rtol=2e-4)
 
 
 def test_tzrzf():
Index: scipy/scipy/interpolate/tests/test_fitpack.py
===================================================================
--- scipy.orig/scipy/interpolate/tests/test_fitpack.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/interpolate/tests/test_fitpack.py	2024-11-21 15:05:10.027954862 +0100
@@ -6,6 +6,7 @@
                            assert_almost_equal, assert_array_almost_equal)
 from pytest import raises as assert_raises
 import pytest
+import platform
 from scipy._lib._testutils import check_free_memory
 
 from scipy.interpolate import RectBivariateSpline
@@ -278,6 +279,7 @@
     def test_order0_diff(self):
         assert_raises(ValueError, splder, self.spl, 4)
 
+    @pytest.mark.skipif(platform.machine().startswith('arm'), reason="test known to fail on armel")
     def test_kink(self):
         # Should refuse to differentiate splines with kinks
 
Index: scipy/scipy/optimize/tests/test_linprog.py
===================================================================
--- scipy.orig/scipy/optimize/tests/test_linprog.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/optimize/tests/test_linprog.py	2024-11-21 15:05:10.031954897 +0100
@@ -15,6 +15,7 @@
 from scipy._lib._util import VisibleDeprecationWarning
 import scipy.sparse
 import pytest
+import platform
 
 has_umfpack = True
 try:
@@ -609,6 +610,7 @@
         if do_presolve:
             assert_equal(res.nit, 0)
 
+    @pytest.mark.skipif(platform.machine().startswith('arm'), reason="test known to fail on armel")
     def test_bounds_infeasible_2(self):
 
         # Test ill-valued bounds (lower inf, upper -inf)
Index: scipy/scipy/special/tests/test_round.py
===================================================================
--- scipy.orig/scipy/special/tests/test_round.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/special/tests/test_round.py	2024-11-21 15:05:10.031954897 +0100
@@ -1,8 +1,14 @@
 import numpy as np
 import pytest
+import platform
 
 from scipy.special import _test_internal
 
+machine=platform.machine()
+if ( machine.startswith('arm') or
+     machine=='alpha' or
+     machine=='parisc64' ):
+    pytest.skip("rounding tests known to fail on armel, alpha and hppa", allow_module_level=True)
 
 @pytest.mark.fail_slow(5)
 @pytest.mark.skipif(not _test_internal.have_fenv(), reason="no fenv()")
Index: scipy/scipy/stats/tests/test_stats.py
===================================================================
--- scipy.orig/scipy/stats/tests/test_stats.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/stats/tests/test_stats.py	2024-11-21 15:05:10.035954931 +0100
@@ -22,6 +22,7 @@
                            assert_array_less)
 import pytest
 from pytest import raises as assert_raises
+import platform
 import numpy.ma.testutils as mat
 from numpy import array, arange, float32, float64, power
 import numpy as np
@@ -748,6 +749,7 @@
     [1] 1.701815e-09
     """
 
+    @pytest.mark.skipif(platform.machine()=='ppc', reason="test known to fail on powerpc")
     def test_basic(self):
         fisher_exact = stats.fisher_exact
 
Index: scipy/scipy/signal/tests/test_spectral.py
===================================================================
--- scipy.orig/scipy/signal/tests/test_spectral.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/signal/tests/test_spectral.py	2024-11-21 15:05:10.035954931 +0100
@@ -6,6 +6,7 @@
                            assert_array_almost_equal_nulp, suppress_warnings)
 import pytest
 from pytest import raises as assert_raises
+import platform
 
 from scipy import signal
 from scipy.fft import fftfreq, rfftfreq, fft, irfft
@@ -360,6 +361,7 @@
                      detrend=lambda seg: signal.detrend(seg, axis=0, type='l'))
         assert_allclose(p, np.zeros_like(p), atol=1e-15)
 
+    @pytest.mark.skipif(platform.machine().startswith('i686'), reason="test known to fail on i386 linux and hurd")
     def test_nd_axis_m1(self):
         x = np.arange(20, dtype=np.float64) + 0.04
         x = x.reshape((2,1,10))
@@ -369,6 +371,7 @@
         f0, p0 = welch(x[0,0,:], nperseg=10)
         assert_allclose(p0[np.newaxis,:], p[1,:], atol=1e-13, rtol=1e-13)
 
+    @pytest.mark.skipif(platform.machine().startswith('i686'), reason="test known to fail on i386 linux and hurd")
     def test_nd_axis_0(self):
         x = np.arange(20, dtype=np.float64) + 0.04
         x = x.reshape((10,2,1))
Index: scipy/scipy/spatial/transform/tests/test_rotation.py
===================================================================
--- scipy.orig/scipy/spatial/transform/tests/test_rotation.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/spatial/transform/tests/test_rotation.py	2024-11-21 15:05:10.035954931 +0100
@@ -1,4 +1,5 @@
 import pytest
+import platform
 
 import numpy as np
 from numpy.testing import assert_equal, assert_array_almost_equal
Index: scipy/scipy/io/arff/tests/test_arffread.py
===================================================================
--- scipy.orig/scipy/io/arff/tests/test_arffread.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/io/arff/tests/test_arffread.py	2024-11-21 15:05:10.035954931 +0100
@@ -6,10 +6,12 @@
 from io import StringIO
 
 import numpy as np
+import pytest
 
 from numpy.testing import (assert_array_almost_equal,
                            assert_array_equal, assert_equal, assert_)
 from pytest import raises as assert_raises
+import platform
 
 from scipy.io.arff import loadarff
 from scipy.io.arff._arffread import read_header, ParseArffError
@@ -96,7 +98,12 @@
         for i in ['yop', 'yap']:
             assert_array_almost_equal(data[i], expect_missing[i])
 
-
+machine=platform.machine()
+@pytest.mark.skipif(machine=='s390x'
+                    or machine.startswith('ppc')
+                    or machine=='parisc64'
+                    or machine=='sparc64',
+                    reason="test known to fail on s390x, powerpc, ppc64, hppa and sparc64")
 class TestNoData:
     def test_nodata(self):
         # The file nodata.arff has no data in the @DATA section.
Index: scipy/scipy/linalg/tests/test_interpolative.py
===================================================================
--- scipy.orig/scipy/linalg/tests/test_interpolative.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/linalg/tests/test_interpolative.py	2024-11-21 15:05:10.039954967 +0100
@@ -36,6 +36,7 @@
                            assert_array_equal)
 import pytest
 from pytest import raises as assert_raises
+import platform
 import sys
 _IS_32BIT = (sys.maxsize < 2**32)
 
@@ -146,6 +147,7 @@
         norm_2_est = pymatrixid.estimate_spectral_norm(A)
         assert_allclose(norm_2_est, s[0], rtol=1e-6, atol=1e-8)
 
+    @pytest.mark.skipif(platform.machine().startswith('arm'), reason="test known to fail on armhf")
     def test_estimate_spectral_norm_diff(self, A):
         B = A.copy()
         B[:, 0] *= 1.2
Index: scipy/scipy/fft/tests/test_fftlog.py
===================================================================
--- scipy.orig/scipy/fft/tests/test_fftlog.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/fft/tests/test_fftlog.py	2024-11-21 15:05:10.039954967 +0100
@@ -1,6 +1,7 @@
 import warnings
 import numpy as np
 import pytest
+import platform
 
 from scipy.fft._fftlog import fht, ifht, fhtoffset
 from scipy.special import poch
@@ -108,6 +109,7 @@
     xp_assert_close(a_, a, rtol=1.5e-7)
 
 
+@pytest.mark.skipif(platform.machine().startswith('mips64'), reason="test known to fail on mips64el")
 def test_fht_special_cases(xp):
     rng = np.random.RandomState(3491349965)
 
Index: scipy/scipy/sparse/csgraph/tests/test_shortest_path.py
===================================================================
--- scipy.orig/scipy/sparse/csgraph/tests/test_shortest_path.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/sparse/csgraph/tests/test_shortest_path.py	2024-11-21 15:05:10.039954967 +0100
@@ -9,6 +9,7 @@
 import scipy.sparse
 from scipy.io import mmread
 import pytest
+import platform
 
 directed_G = np.array([[0, 3, 3, 0, 0],
                        [0, 0, 0, 2, 4],
@@ -378,6 +379,7 @@
     shortest_path(G, method=method)
 
 
+@pytest.mark.skipif(platform.machine().startswith('mips64'), reason="test known to fail on mips64el")
 def test_NaN_warnings():
     with warnings.catch_warnings(record=True) as record:
         shortest_path(np.array([[0, 1], [np.nan, 0]]))
Index: scipy/scipy/stats/tests/test_distributions.py
===================================================================
--- scipy.orig/scipy/stats/tests/test_distributions.py	2024-11-21 15:05:10.043955002 +0100
+++ scipy/scipy/stats/tests/test_distributions.py	2024-11-21 15:05:10.039954967 +0100
@@ -3432,6 +3432,7 @@
         assert_(np.isfinite(s))
         assert_(not np.isfinite(k))
 
+    @pytest.mark.skipif(platform.machine().startswith('mips64'), reason="test known to fail on mips64el")
     def test_moments_warnings(self):
         # no warnings should be generated for dfd = 2, 4, 6, 8 (div by zero)
         with warnings.catch_warnings():
@@ -5352,7 +5353,7 @@
             # for alpha = 1. for linux 32 bit optimize.bisect
             # has some issues for .01 and .99 percentile
             [
-                'piecewise', 1e-11, lambda r: (
+                'piecewise', 2e-10, lambda r: (
                     (r['alpha'] == 1.) &
                     (not is_linux_32) &
                     np.isin(r['pct'], pct_range) &
